# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# OS tasks that occur post-boot and pre-appplication installation
---
# in a dual interface system, eth1 is always public internal
# azure is pre-configured so we only need to do this for AWS & OSP
- name: CONFLUENT OVERLAY (PREFLIGHT) | setting internal private and public interfaces
  set_fact:
    public_internal_interface: "{{ (internal_subnet is defined) | ternary('eth1','eth0') }}"

- block:
  
  - name: CONFLUENT OVERLAY (PREFLIGHT) | configuring no default route on eth0 for {{ application }}
    become: true
    lineinfile: name="/etc/sysconfig/network-scripts/ifcfg-eth0" regexp='^DEFROUTE=' line='DEFROUTE=no'
    
  - name: CONFLUENT OVERLAY (PREFLIGHT) | creating ifcfg-{{ public_internal_interface }}
    become: true
    blockinfile:
      path: "/etc/sysconfig/network-scripts/ifcfg-{{ public_internal_interface }}"
      create: yes
      mode: 0644
      block: |
        BOOTPROTO=dhcp
        DEVICE={{ public_internal_interface }}
        ONBOOT=yes
        TYPE=Ethernet
        USERCTL=no
        
  - name: CONFLUENT OVERLAY (PREFLIGHT) | restart networking
    become: true
    systemd: "name=network state=restarted"

  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    - cloud == 'aws' or cloud == 'osp'
    - public_internal_interface == 'eth1'
  
- block:
  
  # if AWS, set /dev/xvdb, else assume OSP and /dev/vdb
  # this would need to be separated out into multiple set_fact when clauses for additional clouds
  - set_fact:
      block_device: "{{ (cloud == 'aws') | ternary('/dev/xvdb', '/dev/vdb') }}"
  
  # the ansible filesystem module was succeeding without errors, but the resulting filesystem was unmountable
  - name: CONFLUENT OVERLAY (PREFLIGHT) | making filesystem on {{ block_device }}
    command: "/usr/sbin/mkfs -t ext4 {{ block_device }}"
    when: block_device is defined
    
  - name: CONFLUENT OVERLAY (PREFLIGHT) | mounting data volumes
    mount:
      name: "{{ mountpoint }}"
      src: "{{ block_device }}"
      fstype: ext4
      state: mounted

  when:
    - cloud == 'aws' or cloud == 'osp'
    - block_device is defined and mountpoint is defined
  become: true
  
- block:

  - name: CONFLUENT OVERLAY (PREFLIGHT) | reading lun0 link to discover data block device
    command: /usr/bin/readlink -f /dev/disk/azure/scsi1/lun0
    register: found_block_device

  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting block device to {{ found_block_device.stdout }}
    set_fact:
      block_device: "{{ found_block_device.stdout }}"

  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting {{ block_device }} to a full partition
    set_fact:
      data_filesystem: "{{ block_device }}1"
    when: block_device is defined

  - name: CONFLUENT OVERLAY (PREFLIGHT) | partitioning data disk into single {{ data_volume }} partition
    parted:
      device: "{{ block_device }}"
      number: 1
      state: present

  - name: CONFLUENT OVERLAY (PREFLIGHT) | making filesystem on {{ data_filesystem }}
    filesystem:
      fstype: ext4
      dev: "{{ data_filesystem }}"
    when: data_filesystem is defined

  - shell: "/usr/sbin/blkid {{ data_filesystem }} | /bin/awk '{ print $2 }'"
    register: shell_out

  # technically removing the quotes isn't necessary, but it's pretty
  - set_fact:
     block_uuid: "{{ shell_out.stdout | replace('\"', '') }}"

  - name: CONFLUENT OVERLAY (PREFLIGHT) | mounting Azure data volume {{ block_uuid }} to {{ mountpoint }}
    mount:
      path: "{{ mountpoint }}"
      src: "{{ block_uuid }}"
      fstype: ext4
      state: mounted

  when: cloud == 'azure'
  become: true  
  
- name: CONFLUENT OVERLAY (PREFLIGHT) | ensure sshd_config is writable
  command: /bin/chattr -i /etc/ssh/sshd_config
  become: true
  
- name: CONFLUENT OVERLAY (PREFLIGHT) | ensuring sshd listens on provisioning network
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^#ListenAddress 0.0.0.0"
    backrefs: yes
    line: "ListenAddress {{ hostvars[inventory_hostname].ansible_default_ipv4.address }}"
  notify:
    - restart sshd
  become: true

- name: CONFLUENT OVERLAY (PREFLIGHT) | generating UUID
  shell: /usr/bin/uuidgen | /usr/bin/tr -d \-
  register: uuid
  become: true

# the lineinfile plays aren't intended to be idempotent but re-running has no tested side effects
- block:
  
  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting hostname actively so rebooting is unnecessary
    command: /usr/bin/hostnamectl set-hostname {{ application }}-{{ uuid.stdout }}

  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting pretty hostname actively so rebooting is unnecessary
    command: /usr/bin/hostnamectl --pretty set-hostname "{{ tenant }} {{ application }}"  

  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting hostname in /etc/hostname
    replace:
      path: /etc/hostname
      regexp: "{{ hostvars[inventory_hostname].ansible_hostname }}.ec2.internal"
      replace: "{{ application }}-{{ uuid.stdout }}.localdomain"
    when: cloud == 'aws'
    
  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting {{ application }}-{{ uuid.stdout }}.localdomain in /etc/sysconfig/network
    lineinfile:
      dest: /etc/sysconfig/network
      state: present
      regexp: '^HOSTNAME='
      backrefs: yes
      line: "HOSTNAME={{ application }}-{{ uuid.stdout }}.localdomain"

  - name: CONFLUENT OVERLAY (PREFLIGHT) | setting {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }} to {{ application }}-{{ uuid.stdout }}.localdomain in /etc/hosts
    lineinfile:
      dest: /etc/hosts
      state: present
      regexp: "^{{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}"
      insertafter: EOF
      line: "{{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}   {{ application }}-{{ uuid.stdout }}.localdomain {{ application }}-{{ uuid.stdout }} {{ application }}"

  - name: CONFLUENT OVERLAY (PREFLIGHT) | ensuring hostname changes persist after reboot
    lineinfile:
      dest: /etc/cloud/cloud.cfg
      state: present
      insertafter: EOF
      line: 'preserve_hostname: true'
    when: cloud == 'aws'
      
  - name: CONFLUENT OVERLAY (PREFLIGHT) | installing netcat
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - nmap-ncat
      
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
