# (c) 2016 DataNexus Inc.  All Rights Reserved.
# Licensed software not for distribution
#
# configure confluent controlcenter
---
- import_tasks: tune.yml
# this is a application specific preflight run after the platform preflight
- import_tasks: preflight.yml

- set_fact: 
    controlcenter_path: "{{ (got_root | default('yes')) | ternary('/usr/bin', (confluent_root + '/confluent-' + confluent.packages.confluent_version + '.' + confluent.packages.minor_release.split('-')[0] + '/bin')) }}"
    
- block:
  
  # cap number of brokers in config at 5
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring bootstrap servers
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^bootstrap.servers='
      line: "bootstrap.servers={{ groups['kafka_public'][:5] | join(':' + kafka.config.broker_port + ',') }}:{{ kafka.config.broker_port }}"
      insertafter: '^#bootstrap.servers='
    notify: restart controlcenter
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring zookeeper hosts
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^zookeeper.connect='
      line: "zookeeper.connect={{ groups['zookeeper_private'] | join(':' + zookeeper.config.port + ',') }}:{{ zookeeper.config.port }}"
      insertafter: '^#zookeeper.connect='
    notify: restart controlcenter
      
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring control center data directory
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^confluent.controlcenter.data.dir='
      line: "confluent.controlcenter.data.dir={{ controlcenter_data_dir | default(control.center.config.confluent_controlcenter_data_dir) }}"
    notify: restart controlcenter
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | creating control center data directory
    file:
      path: "{{ controlcenter_data_dir | default(control.center.config.confluent_controlcenter_data_dir) }}"
      state: directory
      mode: 0755
      owner: "{{ control.center.user }}"
      group:  "{{ control.center.group }}"
    notify: restart controlcenter
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring control center license
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^#confluent.controlcenter.license='
      line: "#confluent.controlcenter.license={{ controlcenter_license | default(control.center.config.confluent_license) }}"
    notify: restart controlcenter
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring control center id
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^confluent.controlcenter.id='
      line: "confluent.controlcenter.id={{ (cluster != 'none') | ternary(cluster,'1') }}"
      insertafter: '^#confluent.controlcenter.id='
    notify: restart controlcenter
    
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring distributed connect hosts
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^confluent.controlcenter.connect.cluster='
      line: "confluent.controlcenter.connect.cluster=http://{{ groups['kafka_connect_public'] | join(':' + connect.distributed.config.rest_port + ',http://') }}:{{ connect.distributed.config.rest_port }}"
      insertafter: '^#confluent.controlcenter.connect.cluster='
    when:
      - groups['kafka_connect_public'] is defined
      - groups['kafka_connect_public'] | length > 0
    notify: restart controlcenter
    
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring ksql hosts
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^confluent.controlcenter.ksql.url='
      line: "confluent.controlcenter.ksql.url=http://{{ groups['kafka_ksql_public'] | join(':' + ksql.config.listener_port + ',http://') }}:{{ ksql.config.listener_port }}"
      insertafter: '^#confluent.controlcenter.ksql.url='
    when: 
      - groups['kafka_ksql'] is defined
      - groups['kafka_ksql'] | length > 0
    notify: restart controlcenter
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | configuring schema registry hosts
    lineinfile:
      path: "{{ control.center.config_file }}"
      regexp: '^confluent.controlcenter.schema.registry.url='
      line: "confluent.controlcenter.schema.registry.url=http://{{ groups['registry'] | join(':' + schema.registry.config.schema_registry_listener_port + ',http://') }}:{{ schema.registry.config.schema_registry_listener_port }}"
      insertafter: '^#confluent.controlcenter.schema.registry.url='
    when:
      -  groups['registry'] is defined
      -  groups['registry'] | length > 0
    notify: restart controlcenter
  
  # this is a little odd because we either need to be root or the confluent user
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | ensuring {{ (got_root | default('yes')) | ternary('/var/run', (confluent_root + '/var/run')) }} exists
    file:
      path: "{{ (got_root | default('yes')) | ternary('/var/run', (confluent_root + '/var/run')) }}"
      owner: "{{ (got_root | default('yes')) | ternary('root', control.center.user) }}"
      group: "{{ (got_root | default('yes')) | ternary('root', control.center.group) }}"
      state: directory
      mode: 0755
      
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | ensuring {{ control.center.user_service }} exists
    file:
      path: "{{ control.center.user_service }}"
      owner: "{{ control.center.user }}"
      group: "{{ control.center.group }}"
      state: directory
      mode: 0755
      
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | installing {{ control.center.service_name }} into {{ control.center.user_service }}
    template:
      src: confluent.controlcenter.j2
      dest: "{{ control.center.user_service }}/confluent-control-center"
      mode: 0755
      owner: "{{ control.center.user }}"
      group: "{{ control.center.group }}"
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | ensuring {{ control.center.config.logDir }} exists
    file:
      path: "{{ control.center.config.logDir }}"
      owner: "{{ control.center.user }}"
      group: "{{ control.center.group }}"
      state: directory
      mode: 0755
      
  # the thinking here is that these files are either restricted or not and that drives our escalation  
  become: "{{ got_root | default('yes') }}"
  
- block:
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | creating systemd override directory
    file:
      path: "{{ control.center.systemd_override }}"
      owner: "{{ control.center.user }}"
      group: "{{ control.center.group }}"
      state: directory
      mode: 0750
    when: 
      - ansible_distribution_version is version_compare('7', '>=')
      
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | installing {{ control.center.service_name }} environment overrride
    template:
      src: environment.j2
      dest: "{{ control.center.systemd_override }}/override.conf"
      mode: 0640
      owner: "{{ control.center.user }}"
      group: "{{ control.center.group }}"
    notify:
      - reload systemd
      - restart controlcenter
    when: 
      - ansible_distribution_version is version_compare('7', '>=')
      
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | starting {{ control.center.service_name }} by systemd
    systemd:
      name: "{{ control.center.service_name }}"
      enabled: yes
    when:
      - ansible_distribution_version is version_compare('7', '>=')
  
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | installing sysvinit {{ control.center.service_name }} script
    template:
      src: confluent.sysvinit.j2
      dest: "/etc/init.d/{{ control.center.service_name }}"
      mode: 0755
      owner: root
      group: root
    when: 
      - ansible_distribution_version is version_compare('7', '<')
      
  # the restart handler should take care of starting the service
  - name: CONFLUENT OVERLAY (CONTROL CENTER) | enabling {{ control.center.service_name }} by sysvinit
    sysvinit:
      name: "{{ control.center.service_name }}"
      enabled: yes
    when:
      - ansible_distribution_version is version_compare('7', '<')
  
  become: yes
  when:
    - got_root | default('yes') 
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
