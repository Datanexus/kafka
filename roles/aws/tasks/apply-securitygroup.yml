# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# apply AWS confluent platform security group rules for multi-interface systems
---
# this is only necessary when modifying interface 0
- name: CONFLUENT OVERLAY | getting id of default security group
  ec2_group_facts:
    region: "{{ region }}"
    filters:
      group-name: "dnsg_{{ project }}_ssh_private_internal"
      vpc-id: "{{ specified_vpc.vpcs.0.id }}"
  register: sg_ssh_private
  when: cloud =="aws"

- import_tasks: apply-zookeeper.yml
- import_tasks: apply-kafkabroker.yml
- import_tasks: apply-kafkaconnect.yml
- import_tasks: apply-kafkaregistry.yml
- import_tasks: apply-kafkarestproxy.yml
- import_tasks: apply-confluentksql.yml
- import_tasks: apply-confluentcontrolcenter.yml
- import_tasks: apply-cruisecontrol.yml

- name: CONFLUENT OVERLAY | discovering kafka replicator replicator instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_replicator'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_replicator_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      replicator_interfaces: "{{ all_replicator_nodes.instances | map(attribute='network_interfaces') | list }}"

  - name: CONFLUENT OVERLAY | applying kafka replicator internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ replicator_interfaces }}"
    when: item.attachment.device_index == 0
  
  - name: CONFLUENT OVERLAY | applying kafka replicator external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_kafka_replicator_external.group_id }}"        
    with_items: "{{ replicator_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'kafka_replicator' in groups | default([])"
