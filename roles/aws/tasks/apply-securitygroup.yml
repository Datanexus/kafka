# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# apply AWS confluent platform security group rules for multi-interface systems
---
# this is only necessary when modifying interface 0
- name: CONFLUENT OVERLAY | getting id of default security group
  ec2_group_facts:
    region: "{{ region }}"
    filters:
      group-name: "dnsg_{{ project }}_ssh_private_internal"
      vpc-id: "{{ specified_vpc.vpcs.0.id }}"
  register: sg_ssh_private
  when: cloud =="aws"

- name: CONFlUENT OVERLAY | discovering zookeeper instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}"
      "tag:Application": 'zookeeper'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_zookeeper_nodes
  when:
    - cloud == 'aws'
    - "'zookeeper' in groups | default([])"

- block:

  # construct list of all interfaces attached to zookeeper nodes
  - set_fact:
      zookeeper_interfaces: "{{ all_zookeeper_nodes.instances | map(attribute='network_interfaces') | list }}"

  # apply zookeeper rule and the internal SSH rule
  - name: CONFLUENT OVERLAY | applying zookeeper security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_zookeeper_internal.group_id }}"
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ zookeeper_interfaces }}"
    when: item.attachment.device_index == 0

  when:
    - "'zookeeper' in groups | default([])"
    - groups.zookeeper | length > 0
  
- name: CONFLUENT OVERLAY | discovering kafka broker instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_broker'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_kafka_nodes
  when:
    - cloud == 'aws'
    - "'kafka_broker' in groups | default([])"

- block:

  # construct list of all interfaces attached to confluent nodes
  - set_fact:
      kafka_interfaces: "{{ all_kafka_nodes.instances | map(attribute='network_interfaces') | list }}"
  
  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying ssh internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ kafka_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying kafka broker external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_kafka_external.group_id }}"
    with_items: "{{ kafka_interfaces }}"
    when: item.attachment.device_index == 1
  
  when:
    - "'kafka_broker' in groups | default([])"
    - groups.kafka_broker | length > 0

- name: CONFLUENT OVERLAY | discovering controlcenter instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_broker'
      "tag:Role": 'controlcenter'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_control_nodes
  when: cloud == 'aws'

- block:
  
  # construct list of all interfaces attached to confluent nodes
  - set_fact:
      control_interfaces: "{{ all_control_nodes.instances | map(attribute='network_interfaces') | list }}"

  - name: CONFLUENT OVERLAY | applying ssh internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ kafka_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying kafka broker and control center external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_kafka_external.group_id }}"
        - "{{ sg_controlcenter_external.group_id }}"
    with_items: "{{ control_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'controlcenter' in groups | default([])"

- name: CONFLUENT OVERLAY | discovering schema registry instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'registry'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_registry_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      registry_interfaces: "{{ all_registry_nodes.instances | map(attribute='network_interfaces') | list }}"

  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying kafka registry internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ registry_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent external registry rule
  - name: CONFLUENT OVERLAY | applying kafka registry external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_registry_external.group_id }}"
    with_items: "{{ registry_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'registry' in groups | default([])"

- name: CONFLUENT OVERLAY | discovering kafka rest proxy instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'rest_proxy'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_rest_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      rest_interfaces: "{{ all_rest_nodes.instances | map(attribute='network_interfaces') | list }}"

  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying kafka rest proxy internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ rest_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent external rest proxy rules 
  - name: CONFLUENT OVERLAY | applying kafka rest proxy external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_restproxy_external.group_id }}"
    with_items: "{{ rest_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'rest_proxy' in groups | default([])"

- name: CONFLUENT OVERLAY | discovering kafka ksql instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_ksql'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_ksql_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      ksql_interfaces: "{{ all_ksql_nodes.instances | map(attribute='network_interfaces') | list }}"

  # apply confluent rule and the internal SSH rule 
  - name: CONFLUENT OVERLAY | applying kafka ksql internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ ksql_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent external ksql rules 
  - name: CONFLUENT OVERLAY | applying kafka ksql external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ksql_external.group_id }}"
    with_items: "{{ ksql_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'kafka_ksql' in groups | default([])"

- name: CONFLUENT OVERLAY | discovering kafka connect instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_connect'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_connect_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      connect_interfaces: "{{ all_connect_nodes.instances | map(attribute='network_interfaces') | list }}"

  - name: CONFLUENT OVERLAY | applying kafka connector internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        # - "{{ sg_kafka_connect_internal.group_id }}"
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ connect_interfaces }}"
    when: item.attachment.device_index == 0
  
  # apply confluent external connect rules 
  - name: CONFLUENT OVERLAY | applying kafka connect external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_kafka_connect_external.group_id }}"        
    with_items: "{{ connect_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'kafka_connect' in groups | default([])"

- name: CONFLUENT OVERLAY | discovering kafka replicator replicator instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Tenant": "{{ tenant }}"
      "tag:Project": "{{ project }}"
      "tag:Domain": "{{ domain }}" 
      "tag:Application": 'kafka_replicator'
      "tag:Cluster": "{{ cluster | default ('a') }}"
      "tag:Dataflow": "{{ dataflow | default ('none') }}"
  register: all_replicator_nodes
  when: cloud == 'aws'

- block:
  
  - set_fact:
      replicator_interfaces: "{{ all_replicator_nodes.instances | map(attribute='network_interfaces') | list }}"

  - name: CONFLUENT OVERLAY | applying kafka replicator internal security rules to interface 0
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_ssh_private.security_groups.0.group_id }}"
    with_items: "{{ replicator_interfaces }}"
    when: item.attachment.device_index == 0
  
  - name: CONFLUENT OVERLAY | applying kafka replicator external security rules to interface 1
    ec2_eni:
      region: "{{ region }}"
      eni_id: "{{ item.network_interface_id }}"
      security_groups:
        - "{{ sg_kafka_replicator_external.group_id }}"        
    with_items: "{{ replicator_interfaces }}"
    when: item.attachment.device_index == 1
  
  when: "'kafka_replicator' in groups | default([])"
