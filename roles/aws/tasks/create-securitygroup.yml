# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# create AWS postgresql security group rules
---
- name: CONFLUENT OVERLAY | creating confluent zookeeper security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_zookeeper_private_internal"
    description: "zookeeper ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: "{{ zookeeper.config.port }}"
        to_port: "{{ zookeeper.config.port }}"
        cidr_ip: "{{ internal_subnet }}"
      - proto: tcp
        from_port: "{{ zookeeper.config.peers }}"
        to_port: "{{ zookeeper.config.peers }}"
        cidr_ip: "{{ internal_subnet }}"
      - proto: tcp
        from_port: "{{ zookeeper.config.leaders }}"
        to_port: "{{ zookeeper.config.leaders }}"
        cidr_ip: "{{ internal_subnet }}"    
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'zookeeper' in groups | default([])"
  register: sg_zookeeper_internal

# - name: CONFLUENT OVERLAY | creating confluent kafka connector private internal security group
#   local_action:
#     module: ec2_group
#     name: "dnsg_{{ project }}_kafka_connect_private_internal"
#     description: "kafka connector internal ingress and unrestricted egress rules (ansible)"
#     vpc_id: "{{ specified_vpc.vpcs.0.id }}"
#     region: "{{ region }}"
#     rules:
#       - proto: tcp
#         from_port: "{{ connect.distributed.config.listener_port }}"
#         to_port: "{{ connect.distributed.config.listener_port }}"
#         cidr_ip: "{{ internal_subnet }}"
#     rules_egress:
#       # Allow all outbound
#       - proto: all
#         cidr_ip: 0.0.0.0/0
#   when: "'kafka_connect' in groups | default([])"
#   register: sg_kafka_connect_internal
   
- name: CONFLUENT OVERLAY | creating confluent kafka connector private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_kafka_connect_private_external"
    description: "kafka connector external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: "{{ connect.distributed.config.listener_port }}"
        to_port: "{{ connect.distributed.config.listener_port }}"
        cidr_ip: "{{ external_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'kafka_connect' in groups | default([])"
  register: sg_kafka_connect_external
  
- name: CONFLUENT OVERLAY | creating confluent kafka connect replicator private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_kafka_replicator_private_external"
    description: "kafka connect replicator external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        # from_port: "{{ replicator.distributed.config.listener_port }}" CNK
        # to_port: "{{ replicator.distributed.config.listener_port }}" CNK
        from_port: 0
        to_port: 65535
        cidr_ip: "{{ external_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'kafka_replicator' in groups | default([])"
  register: sg_kafka_replicator_external
  
- name: CONFLUENT OVERLAY | creating confluent kafka broker private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_kafka_private_external"
    description: "kafka broker external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      # plaintext
      - proto: tcp
        from_port: "{{ kafka.broker.config.plaintext }}"
        to_port: "{{ kafka.broker.config.plaintext }}"
        cidr_ip: "{{ external_subnet }}"    
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'kafka_broker' in groups | default([])"
  register: sg_kafka_external

- name: CONFLUENT OVERLAY | creating confluent kafka registry private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_registry_private_external"
    description: "kafka registry external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      # schema registry
      - proto: tcp
        from_port: "{{ schema.registry.config.listener_port }}"
        to_port: "{{ schema.registry.config.listener_port }}"
        cidr_ip: "{{ external_subnet }}" 
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'registry' in groups | default([])"
  register: sg_registry_external

- name: CONFLUENT OVERLAY | creating confluent kafka rest proxy private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_restproxy_private_external"
    description: "kafka rest proxy external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      # ReST connector
      - proto: tcp
        from_port: "{{ kafka.rest.config.rest_port }}"
        to_port: "{{ kafka.rest.config.rest_port }}"
        cidr_ip: "{{ external_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'rest_proxy' in groups | default([])"
  register: sg_restproxy_external

- name: CONFLUENT OVERLAY | creating confluent kafka ksql private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_ksql_private_external"
    description: "kafka ksql external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: "{{ ksql.config.listener_port }}"
        to_port: "{{ ksql.config.listener_port }}"
        cidr_ip: "{{ external_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'kafka_ksql' in groups | default([])"
  register: sg_ksql_external

- name: CONFLUENT OVERLAY | creating confluent control center private external security group
  local_action:
    module: ec2_group
    name: "dnsg_{{ project }}_controlcenter_private_external"
    description: "confluent control center external ingress and unrestricted egress rules (ansible)"
    vpc_id: "{{ specified_vpc.vpcs.0.id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: "{{ control.center.config.ui }}"
        to_port: "{{ control.center.config.ui }}"
        cidr_ip: "{{ external_subnet }}"
    rules_egress:
      # Allow all outbound
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: "'controlcenter' in groups | default([])"
  register: sg_controlcenter_external
