# (c) Copyright 2018 DataNexus Inc.  All Rights Reserved.
#
#
---
- import_tasks: interface-facts.yml
  
- block:
  
  - name: CONFLUENT OVERLAY (CONNECT) | configuring bootstrap servers for distributed connectors
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^bootstrap.servers='
      line: "bootstrap.servers={{ groups['kafka_public'] | join(':' + kafka.config.broker_port + ',') }}:{{ kafka.config.broker_port }}"
    # notify: restart connect
      
  - name: CONFLUENT OVERLAY (CONNECT) | configuring cluster group id
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^group.id='
      line: "group.id={{ connect.distributed.config.group_id }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring key converter
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^key.converter='
      line: "key.converter={{ connect.distributed.config.internal_key_converter }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring value converter
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^value.converter='
      line: "value.converter={{ connect.distributed.config.internal_value_converter }}"
    # notify: restart connect
            
  - name: CONFLUENT OVERLAY (CONNECT) | configuring key converter schema enablement
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^key.converter.schemas.enable='
      line: "key.converter.schemas.enable={{ connect.distributed.config.internal_key_converter_schemas_enable }}"
    # notify: restart connect
            
  - name: CONFLUENT OVERLAY (CONNECT) | configuring value converter schema enablement
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^value.converter.schemas.enable='
      line: "value.converter.schemas.enable={{ connect.distributed.config.internal_value_converter_schemas_enable }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring storage offset topic
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^offset.storage.topic='
      line: "offset.storage.topic={{ connect.distributed.config.offset_storage_topic }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring storage offset topic replication factor
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^offset.storage.replication.factor='
      line: "offset.storage.replication.factor={{ connect.distributed.config.offset_storage_replication_factor }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring storage offset topic
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^config.storage.topic='
      line: "config.storage.topic={{ connect.distributed.config.config_storage_topic }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring storage offset topic replication factor
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^config.storage.replication.factor='
      line: "config.storage.replication.factor={{ connect.distributed.config.config_storage_replication_factor }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring status storage topic
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^status.storage.topic='
      line: "status.storage.topic={{ connect.distributed.config.status_storage_topic }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring status storage topic replication factor
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^status.storage.replication.factor='
      line: "status.storage.replication.factor={{ connect.distributed.config.status_storage_replication_factor }}"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring offset flush interval
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^offset.flush.interval.ms='
      line: "offset.flush.interval.ms={{ connect.distributed.config.offset_flush_interval_ms }}"
    # notify: restart connect

  - name: CONFLUENT OVERLAY (CONNECT) | enabling and configuring ReST host
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^#rest.host.name='
      line: "rest.host.name={{ groups['rest_proxy'] | join(',') }}"
    when: "'rest' in groups | default([])"
    # notify: restart connect

  - name: CONFLUENT OVERLAY (CONNECT) | enabling and configuring ReST port
    lineinfile:
      backrefs: yes
      path: "{{ connect.distributed.config_file }}"
      regexp: '^#rest.port='
      line: "rest.port={{ kafkarest.config.rest_port }}"
    when: "'rest' in groups | default([])"
    # notify: restart connect
        
  - name: CONFLUENT OVERLAY (CONNECT) | configuring kafka connect properties for interceptors for control center
    lineinfile:
      path: "{{ connect.distributed.config_file }}"
      regexp: '^consumer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
      line: 'consumer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
    when: "'controlcenter' in groups | default([])"
    # notify: restart connect

  - name: CONFLUENT OVERLAY (CONNECT) | configuring kafka connect properties for interceptors for control center
    lineinfile:
      path: "{{ connect.distributed.config_file }}"
      regexp: '^producer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
      line: 'producer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
    when: "'controlcenter' in groups | default([])"
    # notify: restart connect
      
  become: yes
 
- block:
  
  - name: CONFLUENT OVERLAY (CONNECT) | tuning {{ connect.distributed.service_name }} JVM
    blockinfile:
      path: "{{ connect.distributed.systemd_configuration }}"
      marker: "# {mark} DataNexus managed tuning"
      insertafter: "^Restart="
      block: |
        Environment="KAFKA_HEAP_OPTS={{ connect.distributed.environment.KAFKA_HEAP_OPTS }}"
    notify:
      - reload systemd
  
  - name: CONFLUENT OVERLAY (CONNECT) | starting {{ connect.distributed.service_name }}
    systemd:
      name: "{{ connect.distributed.service_name }}"
      state: restarted
      
  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
